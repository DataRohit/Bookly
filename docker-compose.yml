services:
  backend: &backend
    build:
      context: .
      dockerfile: ./compose/backend/Dockerfile
    image: backend:latest
    container_name: backend
    ports:
      - "8000:8000"
    volumes:
      - .:/app:z
    env_file:
      - ./.envs/.backend.env
    command: /start
    networks:
      - backend_network
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:16
    container_name: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - ./.envs/.postgres.env
    networks:
      - backend_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s

  mailpit:
    image: axllent/mailpit:latest
    container_name: mailpit
    ports:
      - "8025:8025"
    volumes:
      - mailpit_data:/data
    env_file:
      - ./.envs/.mailpit.env
    networks:
      - backend_network

  redis:
    image: redis:6
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - backend_network

  celeryworker:
    <<: *backend
    container_name: celeryworker
    command: /start-celeryworker
    ports: []
    depends_on:
      - redis
    networks:
      - backend_network

  celerybeat:
    <<: *backend
    container_name: celerybeat
    command: /start-celerybeat
    ports: []
    depends_on:
      - redis
    networks:
      - backend_network

  flower:
    <<: *backend
    container_name: flower
    ports:
      - "5555:5555"
    command: /start-flower
    depends_on:
      - redis
    networks:
      - backend_network

networks:
  backend_network:
    driver: bridge

volumes:
  postgres_data:
  mailpit_data:
  redis_data:
